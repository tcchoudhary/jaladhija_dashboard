const cron = require("node-cron");
const { Op } = require("sequelize");
const TicketModel = require("../models/RiseTicket")
const Complex = require("../models/Complex")

// Morning Job
cron.schedule("0 9 * * *", async () => {
  const complexes = await Complex.findAll({ attributes: ["id"] });
  const count = Math.floor(Math.random() * 3) + 2; // 2–4 tickets

  for (let i = 0; i < count; i++) {
    const randomComplex = complexes[Math.floor(Math.random() * complexes.length)];
    await TicketModel.create({
      ticket_id: "TCKT_" + Date.now() + "_" + i,
      complex_id: randomComplex.id,
      user_id: 1, // system default user
      title: `Auto Ticket #${i + 1}`,
      description: "Generated by cron job",
      type: "RAISED",
      status: "Active",
      created_at: new Date(),
    });
  }
  console.log(`✅ ${count} random tickets created`);
});

// Evening Job
cron.schedule("0 18 * * *", async () => {
  const todayStart = new Date();
  todayStart.setHours(0, 0, 0, 0);

  const todayEnd = new Date();
  todayEnd.setHours(23, 59, 59, 999);

  const tickets = await TicketModel.findAll({
    where: {
      created_at: { [Op.between]: [todayStart, todayEnd] },
      status: { [Op.ne]: "Closed" }
    }
  });

  for (const ticket of tickets) {
    if (Math.random() < 0.6) {
      const newStatus = Math.random() < 0.5 ? "Resolved" : "Closed";
      await ticket.update({ status: newStatus });
    }
  }
  console.log(`✅ End of day ticket status update done`);
});





// Current time
// const now = new Date();
// const runMinute = (now.getMinutes() + 1) % 60;
// const runHour = (now.getMinutes() + 1 >= 60) ? (now.getHours() + 1) % 24 : now.getHours();

// Generate Tickets (one-time test run in 3 min)
// cron.schedule(`${runMinute} ${runHour} * * *`, async () => {
//   console.log("⏳ Creating random tickets...");
//   const complexes = await Complex.findAll({ attributes: ["id"] });
//   const count = Math.floor(Math.random() * 3) + 2; // 2–4 tickets

//   for (let i = 0; i < count; i++) {
//     const randomComplex = complexes[Math.floor(Math.random() * complexes.length)];
//     await TicketModel.create({
//       ticket_id: "TCKT_" + Date.now() + "_" + i,
//       complex_id: randomComplex.id,
//       user_id: 1, // system default user
//       title: `Test Auto Ticket #${i + 1}`,
//       description: "Generated by test cron job",
//       type: "RAISED",
//       status: "Active",
//       created_at: new Date(),
//     });
//   }
//   console.log(`✅ ${count} test tickets created`);
// });

// Status Update (run 1 min after ticket creation)
// const updateMinute = (now.getMinutes() + 1) % 60;
// const updateHour = (now.getMinutes() +  1 >= 60) ? (now.getHours() + 1) % 24 : now.getHours();

// cron.schedule(`${updateMinute} ${updateHour} * * *`, async () => {
//   console.log("⏳ Updating random tickets...");
//   const todayStart = new Date();
//   todayStart.setHours(0, 0, 0, 0);

//   const todayEnd = new Date();
//   todayEnd.setHours(23, 59, 59, 999);

//   const tickets = await TicketModel.findAll({
//     where: {
//       created_at: { [Op.between]: [todayStart, todayEnd] },
//       status: { [Op.ne]: "Closed" }
//     }
//   });

//   for (const ticket of tickets) {
//     if (Math.random() < 0.6) {
//       const newStatus = "Closed";
//       await ticket.update({ status: newStatus });
//     }
//   }
//   console.log(`✅ Test ticket status update done`);
// });
